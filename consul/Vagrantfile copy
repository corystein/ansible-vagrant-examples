# -*- mode: ruby -*-
# vi: set ft=ruby :


VAGRANTFILE_API_VERSION = "2"

system("
    export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
    if [ #{ARGV[0]} = 'up' ]; then
        echo 'You are doing vagrant up and can execute your script'
        ansible-galaxy install -c -r requirements.yml
    fi
")

Vagrant.configure("2") do |config|
    config.vm.box = "ubuntu/xenial64"
  
    
    def create_consul_host(config, hostname, ip, initJson)
      config.vm.define hostname do |host|
  
          host.vm.hostname = hostname
          host.vm.provision "shell", path: "provision.sh"
  
          host.vm.network "private_network", ip: ip
          host.vm.provision "shell", inline: "echo '#{initJson}' > /etc/systemd/system/consul.d/init.json"
          host.vm.provision "shell", inline: "service consul start"
      end
    end
  
  # Deploy consul servers
  config.vm.define "consul-server" do |host|
    #hoat.vm.box = "consul-server"
    clientIp="192.168.99.100"
    host.vm.hostname = "consul-server"
    host.vm.network "private_network", ip: clientIp
  end

  # Deploy consul nodes
  for host_number in 1..2
    hostname = "host-#{host_number}"
    config.vm.define hostname do |host|
      host.vm.hostname = hostname
      clientIp="192.168.99.10#{host_number}"
      host.vm.network "private_network", ip: clientIp
    end
  end

    #serverIp = "192.168.99.100"
    #serverInit = %(
    #  {
    #      "server": true,
    #      "ui": true,
    #      "advertise_addr": "#{serverIp}",
    #      "client_addr": "#{serverIp}",
    #      "data_dir": "/tmp/consul",
    #      "bootstrap_expect": 1
    #  }
    #)
  
    #create_consul_host config, "consul-server", serverIp, serverInit
  
    # for host_number in 1..2
    #     hostname="host-#{host_number}"
    #     clientIp="192.168.99.10#{host_number}"
  
    #   clientInit = %(
    #       {
    #           "advertise_addr": "#{clientIp}",
    #           "retry_join": ["#{serverIp}"],
    #           "data_dir": "/tmp/consul"
    #       }
    #   )
  
    #   create_consul_host config, hostname, clientIp, clientInit
    # end

    
    config.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.limit = "all"
      ansible.playbook = "ansible/main.yml"
      ansible.inventory_path = "ansible/inventory"
      ansible.become = true
  
      #ansible.playbook = "playbook.yml"
      #ansible.sudo = true
     end	

    config.vm.post_up_message = "This is the start up message!"

  end
